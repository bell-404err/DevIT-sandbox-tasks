// Задание №5.
// Написать обратный метод (см. задачу 4) objectToArray, который из объекта создаст массив.
// Пример:
//
// objectToArray({
//     name: 'developer',
//     age: 5,
//     skills: {
//         html: 4,
//         css: 5,
//         js: 5
//     }
// })
// Outputs: [['name', 'developer'], ['age', 5], ['skills', [['html', 4], ['css', 5], ['js', 5]]]

// Исходный массив с данными
const obj = {
    name: 'developer',
    age: 5,
    skills: {
        html: 4,
        css: 5,
        js: 5
    }
}

// Создаю функцию, которая будет переводить данные из объекта в массив
function arrayToObject(object) {

    // Создаю массив, в который будут записаны все результаты
    let resultArray = [];

    // Так-как рекурсивная ф-н вызывает сама себя, чтобы отделить результирующий массив resultArray,
    // дабы он не создавался при каждом вызове этой ф-н, создаю саму рекурсивную ф-н
    function recursive(object, resultArray) {
        // Использую метод перебора for...in для перебора всех ключей объекта
        for (let key in object) {
            // Определяем базовый случай, который приведет к завершению рекурсии
            // В случае если текущий ключ объекта не содержит в качестве значения массив
            // (object[key] - получаем значение по ключу), тогда записываем в результирующий массив подмассив.
            // Подмассив представляет из себя пару "ключ" : "значение" записанный как строки.
            if (typeof object[key] !== 'object') {
                resultArray.push([key, object[key]]);
            } else {
                // В случае если текущий ключ объекта содержит другой объект как значение, записываем key в подмассив,
                // затем делаем рекурсивный вызов ф-н recursive, записывая результат в еще один подмассив.
                // В данном случае recursive принимает значение текущего ключа (object[key] - объект) и [] - как массив для результатов
                resultArray.push([key, recursive(object[key], [])]);
            }
        }
        // Возвращаем массив с готовыми результатами
        return resultArray;
    }
    return recursive(object, resultArray);
}
const array = arrayToObject(obj);
console.log(array);