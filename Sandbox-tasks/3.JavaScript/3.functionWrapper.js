// Задание №3.
// Напишите функцию обертку, которая на вход принимает массив функций и их параметров,
// а возвращает массив результатов их выполнения. Количество аргументов исполняемой функции не ограничено!
//
// Пример:
//
// const f1 = (cb) => {cb(1)}
// const f2 = (a, cb) => {cb(a)}
// const f3 = (a, b, cb) => {setTimeout(() => cb([a, b]), 1000)}
//
// bulkRun(
//     [
//         [f1, []],
//         [f2, [2]]
//         [f3, [3, 4]]
//     ]
// ).then(console.log)
// // Output: [1, 2, [3, 4]]

// Исходные данные
const f1 = (cb) => { cb(1) }
const f2 = (a, cb) => { cb(a) }
const f3 = (a, b, cb) => { setTimeout(() => cb([a, b]), 1000) }

// Функция, принимает массив массивов, каждый из которых содержит функцию и ее аргументы
function bulkRun(functionsWithArgs) {

    // Создаю переменную массив, котора будет хранить массивы результатов выполнения
    const result = []

    // В функцию bulkRun приходит массив, нам нужно его как-то перебрать и запустить каждую функцию, используем for...of.
    // Используем синтаксис деструктуризации массивов и извлечем функции и их аргументы "const [fn, args]"
    for (const [fn, args] of functionsWithArgs) {
        // Так как задача подразумевает создание promise и возврат всех значений одновременно, на каждой итерации цикла,
        // то-есть для каждой функции будем создавать новый promise.
        // В промис передаем callback функцию resolve, для обработки результатов выполнения данного промиса.
        const promise = new Promise((resolve => {
            // С помощью метода length определяем количество аргументов текущей функции (которые она ожидает получить)
            const numberOfArguments = fn.length;
            // В случае если количество аргументов равно "0",
            // мы передаем управление в блок then с помощью callback функции resolve.
            // Блок then выводит в консоль результат выполнения промиса.
            if (numberOfArguments === 0) {
                resolve();
            } else {
                // В случае если в функцию были переданы аргументы, нам необходимо выполнить данную функцию с заданными аргументами
                // Так-как функция ожидает аргументы, мы передаем их из переданного в функцию bulkRun массива с помощью спред оператора (...args)
                // А так же передаем callback (cb) который вызовет resolve после выполнения функции
                // result - это результат выполнения текущей функции, resolve передает result в блок кода then, а тот выводит его в консоль
                fn(...args, (...result) => resolve(result));
            }
        }));
        // Добавляем результат выполнения каждого промиса в массив
        result.push(promise);
    }
    // Используем Promise.all, данный метод ожидает завершения выполнения всех переданных в него промисов.
    return Promise.all(result);
}

// Запуск функции
bulkRun([
    [f1, []],
    [f2, [2]],
    [f3, [3, 4]]
]).then(console.log);