// Задание №4.
// Напишите метод arrayToObject, который превращает массив в объект (использовать рекурсию).
// Пример:
//
// var arr = [['name', 'developer'], ['age', 5], ['skills', [['html',4], ['css', 5], ['js',5]]]];
//
// arrayToObject(arr)
// // Outputs: {
// name: 'developer',
//     age: 5,
//     skills: {
//     html: 4,
//     css: 5,
//     js: 5
// }


// Исходный массив с данными
const arr = [['name', 'developer'], ['age', 5], ['skills', [['html', 4], ['css', 5], ['js', 5]]]];

// Функция, которая будет рекурсивно проходиться по массиву и записывает его значения в объект
function arrayToObject(arr) {

    // Создаю пустой объект для записи результатов.
    const obj = {};

    // Т.к при рекурсивном подходе ф-н будет вызывать сама себя, она будет создавать переменную obj каждый раз заново,
    // в результате таких действий могут возникнуть ошибки. Поэтому внутри функции arrayToObject я создаю новую ф-н recursive
    function recursive(arr, obj) {
        // Используем for...of для перебора массива
        for (let item of arr) {
            // Определяемся с базовым случаем: в случае если второй элемент массива - это не массив, а строка
            // то мы записываем нулевой элемент данного подмассива как ключ, а первый элемент подмассива как значение
            if (!Array.isArray(item[1])) {
                obj[item[0]] = item[1];
            } else {
                // В случае если первый элемент этого подмассива - это массив, мы записываем 0 элемент как ключ, а его значение
                // - пустой объект.
                // После этого мы снова вызываем ф-н recursive и передаем item[1] как массив для перебора,
                // а obj[item[0]], - как объект
                obj[item[0]] = {};
                recursive(item[1], obj[item[0]]);
            }
        }
        // Возвращаем объект с записанными в него значениями
        return obj;
    }
    // Получаем заполненный объект из функции recursive, а затем возвращаем значение из arrayToObject
    return recursive(arr, obj);
}
// Записываем готовый объект в новую переменную, которую мы можем использовать
const result = arrayToObject(arr);

console.log(result);